pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID     = '726661503021'
        ECR_REPO           = 'travelease-booking'  // Standardized to match Terraform
        REPO_URI           = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        
        // Recommended: Use Jenkins credentials
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Images') {
            matrix {
                axes {
                    axis {
                        name 'SERVICE'
                        values 'booking', 'payment', 'user', 'frontend'
                    }
                }
                stages {
                    stage('Build') {
                        steps {
                            dir("services/${SERVICE}") {
                                script {
                                    echo "Building Docker image: ${ECR_REPO}-${SERVICE}:${env.BUILD_NUMBER}"
                                    dockerImage = docker.build("${ECR_REPO}-${SERVICE}:${env.BUILD_NUMBER}")
                                }
                            }
                        }
                    }
                    stage('Push to ECR') {
                        steps {
                            script {
                                def ecrImageName = "${env.REPO_URI}/${env.ECR_REPO}-${params.SERVICE}:${env.BUILD_NUMBER}"
                                def latestTag = "${env.REPO_URI}/${env.ECR_REPO}-${params.SERVICE}:latest"

                                // Login to ECR
                                sh """
                                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                                    docker login --username AWS --password-stdin ${REPO_URI}
                                """

                                // Tag and push build-specific image
                                sh "docker tag ${ECR_REPO}-${SERVICE}:${env.BUILD_NUMBER} ${ecrImageName}"
                                sh "docker push ${ecrImageName}"

                                // Optionally push 'latest' tag
                                sh "docker tag ${ecrImageName} ${latestTag}"
                                sh "docker push ${latestTag}"

                                // Store image name in environment for Terraform use
                                env["IMAGE_URI_${SERVICE.toUpperCase()}"] = ecrImageName
                            }
                        }
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('infra/terraform') {
                    sh 'terraform init'
                    sh """
                        terraform apply -auto-approve \
                          -var="booking_image_uri=${env.IMAGE_URI_BOOKING}" \
                          -var="payment_image_uri=${env.IMAGE_URI_PAYMENT}" \
                          -var="user_image_uri=${env.IMAGE_URI_USER}" \
                          -var="frontend_image_uri=${env.IMAGE_URI_FRONTEND}"
                    """
                }
            }
        }

        stage('ECS Deploy (Redeploy)') {
            steps {
                dir('infra/terraform') {
                    sh 'terraform init'
                    sh 'terraform plan'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }
    post {
        success {
            echo '✅ Deployment succeeded!'
        }
        failure {
            echo '❌ Deployment failed!'
        }
        always {
            cleanWs()
        }
    }
}